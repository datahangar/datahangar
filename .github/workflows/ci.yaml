name: ci

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight

jobs:
  cache-docker-images:
    runs-on: ubuntu-22.04
    steps:
      - name: Cleanup disk to maximize runner disk space
        uses: AdityaGarg8/remove-unwanted-software@v3 #easimon/maximize-build-space@v10
        with:
          remove-android: true
          remove-dotnet: True
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true

      - name: Checkout datahangar
        uses: actions/checkout@v4
        with:
          path: datahangar

      - name: Cache docker images into a tarball
        run: |
          cd datahangar
          mkdir -p /tmp/.docker
          .github/workflows/files/collect_docker_images.sh . > /tmp/.docker/images_list
          IMAGES=$(cat /tmp/.docker/images_list)
          for IMAGE in ${IMAGES}; do
            docker pull ${IMAGE}
          done
          docker save $(for IMAGE in ${IMAGES}; do echo "${IMAGE} "; done) -o /tmp/.docker/docker_images.tar

      - name: Cache Docker images
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: /tmp/.docker
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Check available disk space...
        run: |
          df -h

  test-basic:
    needs: [cache-docker-images, test-svc-flow-affinity-minikube]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        k8s_version: [v1.27.13, v1.28.9, v1.29.4]
        db: [druid, clickhouse]
    steps:
      - name: Cleanup disk to maximize runner disk space
        uses: AdityaGarg8/remove-unwanted-software@v3 #easimon/maximize-build-space@v10
        with:
          remove-android: true
          remove-dotnet: True
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true

      - name: Checkout datahangar
        uses: actions/checkout@v4
        with:
          path: datahangar

      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y jq
          pip install -r datahangar/tools/requirements.txt

      - name: Restore Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/.docker
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Import docker cached images to minikube's registry
        run: |
          docker load -i /tmp/.docker/docker_images.tar
          docker image ls

      - name: Execute the tests
        uses: ./datahangar/.github/actions/test
        with:
          k8s_version: "${{ matrix.k8s_version }}"
          db: "${{ matrix.db }}"

  test-svc-flow-affinity-minikube:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        k8s_version: [v1.27.13, v1.28.9, v1.29.4]
        cni_addons: [cilium-kpr, cilium-metallb, calico-metallb]
    steps:
      - name: Split matrix '${{ matrix.cni_addons }}' into 'cni' and 'addons'
        id: split-cni-addons
        run: |
          CNI_ADDONS=`echo ${{matrix.cni_addons}} | sed 's/-kpr//g'`
          IFS='-' read -r cni addons <<< "$CNI_ADDONS"
          echo "cni=${cni}" >> $GITHUB_ENV
          echo "addons=${addons}" >> $GITHUB_ENV

      - name: Cleanup disk to maximize runner disk space
        uses: AdityaGarg8/remove-unwanted-software@v3 #easimon/maximize-build-space@v10
        with:
          remove-android: true
          remove-dotnet: True
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true

      - name: Checkout datahangar
        uses: actions/checkout@v4
        with:
          path: datahangar

      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y jq tcpdump coreutils
          pip install -r datahangar/tools/requirements.txt

      - name: "[minikube] Start K8s ${{ matrix.k8s_version }} (cni: ${{ env.cni }}, addons: ${{ env.addons }})"
        id: minikube
        uses: medyagh/setup-minikube@latest
        with:
          kubernetes-version: ${{ matrix.k8s_version }}
          cpus: 'max'
          memory: 12G
          cni: ${{ env.cni }}
          addons: ${{ env.addons }}
          driver: docker
          #Fix minikube version (buggy for cilium in 1.34.0, minikube#19683
          minikube-version: 1.33.1

      - name: "[minikube] Use local docker registry"
        run: |
          eval $(minikube docker-env)

      - name: "[cilium] Install CLI"
        if: env.cni == 'cilium'
        run: |
          CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
          GOOS=$(go env GOOS)
          GOARCH=$(go env GOARCH)
          wget https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-${GOOS}-${GOARCH}.tar.gz
          sudo tar -C /usr/local/bin -xzvf cilium-${GOOS}-${GOARCH}.tar.gz
          rm cilium-${GOOS}-${GOARCH}.tar.gz

      #No MetalLB (minikube tunnel + KPR)
      - name: "[cilium] Enable KPR (no MetalLB)"
        if: env.cni == 'cilium' && env.addons != 'metallb'
        run: |
          cilium config set kube-proxy-replacement true

      - name: "[cilium] Wait for a clean status (no MetalLB)"
        if: env.cni == 'cilium'
        run: |
          i=0
          MAX_ITERATIONS=5
          while true; do
              [[ "$(cilium status | grep -i error)" == "" ]] && break;
              i=$((i+1))
              [[ "${i}" == "${MAX_ITERATIONS}" ]] && echo "ERROR: cilium is not sane!" &&  exit 1
              sleep 10
          done
          cilium status
          cilium config view

      - name: "[minikube] Bring up tunnel (enable LoadBalancer traffic) (no MetalLB)"
        if: env.addons != 'metallb'
        run: |
          minikube tunnel &
          sleep 10 #Just to see the output clearly

      - name: "[metallb] Configure..."
        if: env.addons == 'metallb'
        run: |
          minikube kubectl -- apply -f datahangar/.github/workflows/files/metallb-conf.yaml
          sudo ip route add 10.70.0.0/24 via `minikube ip`

      - name: "[iptables] Add allow rules in FITLER for router <-> stack traffic..."
        run: |
          sudo iptables -I FORWARD -s 10.0.0.0/8 -j ACCEPT
          sudo iptables -I FORWARD -d 10.0.0.0/8 -j ACCEPT

      - name: "[test] Run test..."
        timeout-minutes: 25
        run: |
          pwd
          cd datahangar/test/test_svc-clientip-affinity/ && make

      - name: Upload the folder as an artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-svc-flow-affinity-minikube_${{ matrix.k8s_version }}-${{ matrix.cni_addons }}-${{ github.sha }}
          path: /home/runner/work/datahangar/datahangar/datahangar/test/test_svc-clientip-affinity/.output/
          include-hidden-files: true
          retention-days: 7
